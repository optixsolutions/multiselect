{"version":3,"file":"vue-select.min.js","sources":["../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../src/components/Dropdown.vue","../src/index.js"],"sourcesContent":["function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\n    <div class=\"vs-dropdown\">\n        <div ref=\"scrollContent\" class=\"vs-dropdown-scroll\">\n            <div v-if=\"! hasOptions\" class=\"vs-dropdown-no-options\">\n                {{ noOptionsMessage }}\n            </div>\n\n            <template v-else>\n                <div\n                    v-for=\"(option, index) in options\"\n                    :key=\"option[optionIdentifier]\"\n                    :ref=\"`option-${index}`\"\n                    @click.stop=\"toggleSelectedOption(option)\"\n                    @mouseout=\"clearFocusedOption\"\n                    @mouseenter=\"setFocusedOption(option)\"\n                >\n                    <slot\n                        name=\"dropdown-option\"\n                        v-bind=\"{\n                            option,\n                            classes: {\n                                'focused': optionIsFocused(option[optionIdentifier]),\n                                'selected': optionIsSelected(option[optionIdentifier]),\n                                'disabled': optionIsDisabled(option),\n                            }\n                        }\"\n                    />\n                </div>\n            </template>\n\n            <slot\n                v-if=\"loadingMore\"\n                name=\"dropdown-loader\"\n            />\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        options: {\n            type: Array,\n            default: () => [],\n        },\n\n        optionIdentifier: {\n            type: [ String, Number ],\n            required: true,\n        },\n\n        selectedOptions: {\n            type: Array,\n            default: () => [],\n        },\n\n        loadingMore: {\n            type: Boolean,\n            default: false,\n        },\n\n        noOptionsMessage: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            focusedOption: null,\n\n            lastScroll: 0,\n            scrollableHeight: 0,\n            scrollLoaderThreshold: 60,\n        };\n    },\n\n    computed: {\n        selectedOptionValues() {\n            return this.selectedOptions.map(option => {\n                return option[this.optionIdentifier];\n            });\n        },\n\n        hasOptions() {\n            return this.options.length !== 0;\n        },\n\n        focusableOptions() {\n            return this.options.filter(option => {\n                return ! option.disabled;\n            });\n        },\n\n        hasFocusableOptions() {\n            return this.focusableOptions.length !== 0;\n        },\n\n        focusedOptionIndex() {\n            if (this.focusedOption) {\n                return this.options.findIndex(option => {\n                    return option[this.optionIdentifier] === this.focusedOption[this.optionIdentifier];\n                });\n            }\n\n            return null;\n        },\n\n        lastOptionIndex() {\n            return this.options.length - 1;\n        },\n    },\n\n    watch: {\n        options: {\n            handler() {\n                this.lastScroll = 0;\n                this.setScrollableHeight();\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        document.addEventListener('keydown', this.keydownListener);\n    },\n\n    mounted() {\n        this.$refs.scrollContent.addEventListener('scroll', this.scrollListener);\n\n        this.setScrollableHeight();\n\n        if (this.hasFocusableOptions) {\n            this.setFocusedOption(this.focusableOptions[0]);\n        }\n    },\n\n    beforeDestroy() {\n        document.removeEventListener('keydown', this.keydownListener);\n        this.$refs.scrollContent.removeEventListener('keydown', this.scrollListener);\n    },\n\n    methods: {\n        keydownListener(e) {\n            if (this.hasFocusableOptions) {\n                // Enter\n                if (e.keyCode === 13) {\n                    e.preventDefault();\n\n                    if (this.focusableOptions.length === 1) {\n                        return this.toggleSelectedOption(\n                            this.focusableOptions[0],\n                        );\n                    }\n\n                    return this.toggleSelectedOption(\n                        this.options[this.focusedOptionIndex],\n                    );\n                }\n\n                // Arrow up\n                if (e.keyCode === 38) {\n                    const previousIndex = this.getPreviousFocusableIndex(\n                        this.focusedOptionIndex,\n                    );\n\n                    this.setFocusedOption(this.options[previousIndex]);\n                    this.scrollToOption(previousIndex);\n                }\n\n                // Arrow down\n                if (e.keyCode === 40) {\n                    const nextIndex = this.getNextFocusableIndex(\n                        this.focusedOptionIndex,\n                    );\n\n                    this.setFocusedOption(this.options[nextIndex]);\n                    this.scrollToOption(nextIndex);\n                }\n            }\n        },\n\n        setScrollableHeight() {\n            this.scrollableHeight = (\n                this.$refs.scrollContent.scrollHeight - this.$refs.scrollContent.clientHeight\n            );\n        },\n\n        scrollListener() {\n            const currentScroll = this.$refs.scrollContent.scrollTop;\n\n            if (\n                ! this.loadingMore\n                && currentScroll > this.lastScroll\n                && (this.scrollableHeight - currentScroll) < this.scrollLoaderThreshold\n            ) {\n                this.lastScroll = currentScroll;\n\n                this.$emit('load-more');\n            }\n        },\n\n        getPreviousFocusableIndex(currentIndex) {\n            if (currentIndex > 0) {\n                const previousIndex = currentIndex - 1;\n\n                if (this.optionIsDisabled(this.options[previousIndex])) {\n                    return this.getPreviousFocusableIndex(previousIndex);\n                }\n\n                return previousIndex;\n            }\n\n            if (this.optionIsDisabled(this.options[0])) {\n                return this.getNextFocusableIndex(0);\n            }\n\n            return 0;\n        },\n\n        getNextFocusableIndex(currentIndex) {\n            if (currentIndex !== this.lastOptionIndex) {\n                const nextIndex = currentIndex !== null ? currentIndex + 1 : 0;\n\n                if (this.optionIsDisabled(this.options[nextIndex])) {\n                    return this.getNextFocusableIndex(nextIndex);\n                }\n\n                return nextIndex;\n            }\n\n            if (this.optionIsDisabled(this.options[currentIndex])) {\n                return this.getPreviousFocusableIndex(currentIndex);\n            }\n\n            return currentIndex;\n        },\n\n        setFocusedOption(option) {\n            this.focusedOption = option;\n        },\n\n        clearFocusedOption() {\n            this.focusedOption = null;\n        },\n\n        optionIsFocused(value) {\n            return this.focusedOption\n                && (this.focusedOption[this.optionIdentifier] === value);\n        },\n\n        optionIsSelected(value) {\n            return this.selectedOptionValues.includes(value);\n        },\n\n        optionIsDisabled(option) {\n            return option.disabled || false;\n        },\n\n        toggleSelectedOption(option) {\n            if (option) {\n                if (this.optionIsDisabled(option)) {\n                    return;\n                }\n\n                if (this.optionIsSelected(option[this.optionIdentifier])) {\n                    return this.$emit('deselect-option', option);\n                }\n\n                this.$emit('select-option', option);\n            }\n        },\n\n        scrollToTop() {\n            this.$refs.scrollContent.scrollTo(0, 0);\n        },\n\n        scrollToOption(index) {\n            this.$refs[`option-${index}`][0].scrollIntoView({\n                behavior: 'smooth',\n                block: 'nearest',\n                inline: 'start',\n            });\n        },\n    },\n};\n</script>\n","import VueSelect from './components/Select.vue';\n\nexport default function install(Vue, options = {}) {\n    const componentName = options.componentName || 'vue-select';\n\n    // Register components\n    Vue.component(componentName, VueSelect);\n}\n"],"names":["normalizeComponent","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","options","hook","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","Vue","componentName","component","VueSelect"],"mappings":"uMAAA,SAASA,EAAmBC,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAAoCC,EAAYC,EAAgBC,EAAmBC,GACzI,kBAAfH,IACPE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAGjB,MAAMI,EAA4B,mBAAXR,EAAwBA,EAAOQ,QAAUR,EAehE,IAAIS,EAmCJ,GAhDIX,GAAYA,EAASY,SACrBF,EAAQE,OAASZ,EAASY,OAC1BF,EAAQG,gBAAkBb,EAASa,gBACnCH,EAAQI,WAAY,EAEhBV,IACAM,EAAQK,YAAa,IAIzBZ,IACAO,EAAQM,SAAWb,GAGnBE,GAEAM,EAAO,SAAUM,IAEbA,EACIA,GACKC,KAAKC,QAAUD,KAAKC,OAAOC,YAC3BF,KAAKG,QAAUH,KAAKG,OAAOF,QAAUD,KAAKG,OAAOF,OAAOC,aAElB,oBAAxBE,sBACnBL,EAAUK,qBAGVrB,GACAA,EAAMsB,KAAKL,KAAMV,EAAkBS,IAGnCA,GAAWA,EAAQO,uBACnBP,EAAQO,sBAAsBC,IAAIpB,IAK1CK,EAAQgB,aAAef,GAElBV,IACLU,EAAOL,EACD,SAAUW,GACRhB,EAAMsB,KAAKL,KAAMT,EAAqBQ,EAASC,KAAKS,MAAMC,SAASC,cAErE,SAAUZ,GACRhB,EAAMsB,KAAKL,KAAMX,EAAeU,MAGxCN,EACA,GAAID,EAAQK,WAAY,CAEpB,MAAMe,EAAiBpB,EAAQE,OAC/BF,EAAQE,OAAS,SAAkCmB,EAAGd,GAElD,OADAN,EAAKY,KAAKN,GACHa,EAAeC,EAAGd,QAG5B,CAED,MAAMe,EAAWtB,EAAQuB,aACzBvB,EAAQuB,aAAeD,EAAW,GAAGE,OAAOF,EAAUrB,GAAQ,CAACA,GAGvE,OAAOT,ECtEX,goWCAe,SAAiBiC,OAAKzB,yDAAU,GACrC0B,EAAgB1B,EAAQ0B,eAAiB,aAG/CD,EAAIE,UAAUD,EAAeE"}